
----------------------------------------
declare void @_Z9reductionPi.omp_outlined(noundef ptr, noundef ptr, nonnull dereferenceable(4) noundef align(4) ptr)
declare void @__kmpc_fork_call(ptr, i32, ptr, ...)

@3 = constant 24 bytes, align 8
@_Z9reductionPi.omp_outlined = constant ? bytes, align 8
@0 = constant 23 bytes, align 1

define void @_Z9reductionPi(ptr noundef %v2) {
init:
  %__copy_0 = {i32, i32, i32, i32, ptr} { 0, 2, 0, 22, @0 }
  store [23 x i8] { 59, 117, 110, 107, 110, 111, 119, 110, 59, 117, 110, 107, 110, 111, 119, 110, 59, 48, 59, 48, 59, 59, 0 }, ptr @0, align 1
  store {i32, i32, i32, i32, ptr} %__copy_0, ptr @3, align 8
  br label %entry

entry:
  %v2.addr = alloca i64 8, align 8
  %v = alloca i64 4, align 4
  store ptr noundef %v2, ptr %v2.addr, align 8
  store i32 0, ptr %v, align 4
  call void @__kmpc_fork_call(ptr @3, i32 1, ptr @_Z9reductionPi.omp_outlined..., ptr %v)
  %#0 = load i32, ptr %v, align 4
  %#1 = load ptr, ptr %v2.addr, align 8
  store i32 %#0, ptr %#1, align 4
  ret void
}
=>
@3 = constant 24 bytes, align 8
@_Z9reductionPi.omp_outlined = constant ? bytes, align 8
@0 = constant 23 bytes, align 1

define void @_Z9reductionPi(ptr noundef %v2) {
entry:
  %v2.addr = alloca i64 8, align 8
  %v = alloca i64 4, align 4
  %i = alloca i64 4, align 4
  store ptr noundef %v2, ptr %v2.addr, align 8
  store i32 0, ptr %v, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:
  %#0 = load i32, ptr %i, align 4
  %cmp = icmp slt i32 %#0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:
  %#1 = load i32, ptr %i, align 4
  %#2 = load i32, ptr %v, align 4
  %add = add nsw i32 %#2, %#1
  store i32 %add, ptr %v, align 4
  br label %for.inc

for.inc:
  %#3 = load i32, ptr %i, align 4
  %inc = add nsw i32 %#3, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond#2

for.cond#2:
  %#0#2 = load i32, ptr %i, align 4
  %cmp#2 = icmp slt i32 %#0#2, 10
  br i1 %cmp#2, label %for.body#2, label %for.end

for.body#2:
  %#1#2 = load i32, ptr %i, align 4
  %#2#2 = load i32, ptr %v, align 4
  %add#2 = add nsw i32 %#2#2, %#1#2
  store i32 %add#2, ptr %v, align 4
  br label %for.inc#2

for.inc#2:
  %#3#2 = load i32, ptr %i, align 4
  %inc#2 = add nsw i32 %#3#2, 1
  store i32 %inc#2, ptr %i, align 4
  br label %for.cond#3

for.cond#3:
  %#0#3 = load i32, ptr %i, align 4
  %cmp#3 = icmp slt i32 %#0#3, 10
  br i1 %cmp#3, label %for.body#3, label %for.end

for.body#3:
  %#1#3 = load i32, ptr %i, align 4
  %#2#3 = load i32, ptr %v, align 4
  %add#3 = add nsw i32 %#2#3, %#1#3
  store i32 %add#3, ptr %v, align 4
  br label %for.inc#3

for.inc#3:
  %#3#3 = load i32, ptr %i, align 4
  %inc#3 = add nsw i32 %#3#3, 1
  store i32 %inc#3, ptr %i, align 4
  br label %for.cond#4

for.cond#4:
  %#0#4 = load i32, ptr %i, align 4
  %cmp#4 = icmp slt i32 %#0#4, 10
  br i1 %cmp#4, label %for.body#4, label %for.end

for.body#4:
  %#1#4 = load i32, ptr %i, align 4
  %#2#4 = load i32, ptr %v, align 4
  %add#4 = add nsw i32 %#2#4, %#1#4
  store i32 %add#4, ptr %v, align 4
  br label %for.inc#4

for.inc#4:
  %#3#4 = load i32, ptr %i, align 4
  %inc#4 = add nsw i32 %#3#4, 1
  store i32 %inc#4, ptr %i, align 4
  br label %for.cond#5

for.cond#5:
  %#0#5 = load i32, ptr %i, align 4
  %cmp#5 = icmp slt i32 %#0#5, 10
  br i1 %cmp#5, label %for.body#5, label %for.end

for.body#5:
  %#1#5 = load i32, ptr %i, align 4
  %#2#5 = load i32, ptr %v, align 4
  %add#5 = add nsw i32 %#2#5, %#1#5
  store i32 %add#5, ptr %v, align 4
  br label %for.inc#5

for.inc#5:
  %#3#5 = load i32, ptr %i, align 4
  %inc#5 = add nsw i32 %#3#5, 1
  store i32 %inc#5, ptr %i, align 4
  br label %for.cond#6

for.cond#6:
  %#0#6 = load i32, ptr %i, align 4
  %cmp#6 = icmp slt i32 %#0#6, 10
  br i1 %cmp#6, label %for.body#6, label %for.end

for.body#6:
  %#1#6 = load i32, ptr %i, align 4
  %#2#6 = load i32, ptr %v, align 4
  %add#6 = add nsw i32 %#2#6, %#1#6
  store i32 %add#6, ptr %v, align 4
  br label %for.inc#6

for.inc#6:
  %#3#6 = load i32, ptr %i, align 4
  %inc#6 = add nsw i32 %#3#6, 1
  store i32 %inc#6, ptr %i, align 4
  br label %for.cond#7

for.cond#7:
  %#0#7 = load i32, ptr %i, align 4
  %cmp#7 = icmp slt i32 %#0#7, 10
  br i1 %cmp#7, label %for.body#7, label %for.end

for.body#7:
  %#1#7 = load i32, ptr %i, align 4
  %#2#7 = load i32, ptr %v, align 4
  %add#7 = add nsw i32 %#2#7, %#1#7
  store i32 %add#7, ptr %v, align 4
  br label %for.inc#7

for.inc#7:
  %#3#7 = load i32, ptr %i, align 4
  %inc#7 = add nsw i32 %#3#7, 1
  store i32 %inc#7, ptr %i, align 4
  br label %for.cond#8

for.cond#8:
  %#0#8 = load i32, ptr %i, align 4
  %cmp#8 = icmp slt i32 %#0#8, 10
  br i1 %cmp#8, label %for.body#8, label %for.end

for.body#8:
  %#1#8 = load i32, ptr %i, align 4
  %#2#8 = load i32, ptr %v, align 4
  %add#8 = add nsw i32 %#2#8, %#1#8
  store i32 %add#8, ptr %v, align 4
  br label %for.inc#8

for.inc#8:
  %#3#8 = load i32, ptr %i, align 4
  %inc#8 = add nsw i32 %#3#8, 1
  store i32 %inc#8, ptr %i, align 4
  br label %for.cond#9

for.cond#9:
  %#0#9 = load i32, ptr %i, align 4
  %cmp#9 = icmp slt i32 %#0#9, 10
  br i1 %cmp#9, label %for.body#9, label %for.end

for.body#9:
  %#1#9 = load i32, ptr %i, align 4
  %#2#9 = load i32, ptr %v, align 4
  %add#9 = add nsw i32 %#2#9, %#1#9
  store i32 %add#9, ptr %v, align 4
  br label %for.inc#9

for.inc#9:
  %#3#9 = load i32, ptr %i, align 4
  %inc#9 = add nsw i32 %#3#9, 1
  store i32 %inc#9, ptr %i, align 4
  br label %for.cond#10

for.cond#10:
  %#0#10 = load i32, ptr %i, align 4
  %cmp#10 = icmp slt i32 %#0#10, 10
  br i1 %cmp#10, label %for.body#10, label %for.end

for.body#10:
  %#1#10 = load i32, ptr %i, align 4
  %#2#10 = load i32, ptr %v, align 4
  %add#10 = add nsw i32 %#2#10, %#1#10
  store i32 %add#10, ptr %v, align 4
  br label %for.inc#10

for.inc#10:
  %#3#10 = load i32, ptr %i, align 4
  %inc#10 = add nsw i32 %#3#10, 1
  store i32 %inc#10, ptr %i, align 4
  br label %for.cond#exit

for.cond#exit:
  %#0#exit = load i32, ptr %i, align 4
  %cmp#exit = icmp slt i32 %#0#exit, 10
  br i1 %cmp#exit, label #sink, label %for.end

for.end:
  %#4 = load i32, ptr %v, align 4
  %#5 = load ptr, ptr %v2.addr, align 8
  store i32 %#4, ptr %#5, align 4
  ret void
}
Transformation doesn't verify!

ERROR: Source is more defined than target

Example:
ptr noundef %v2 = null

Source:
{i32, i32, i32, i32, ptr} %__copy_0 = { #x00000000 (0), #x00000002 (2), #x00000000 (0), #x00000016 (22), pointer(non-local, block_id=3, offset=0) / Address=#x080 }
  >> Jump to %entry
ptr %v2.addr = pointer(local, block_id=0, offset=0) / Address=#x110
ptr %v = pointer(local, block_id=1, offset=0) / Address=#x100
void = function did not return!

SOURCE MEMORY STATE
===================
NON-LOCAL BLOCKS:
Block 0 >	size: 0	align: 1	alloc type: 0	alive: false	address: 0
Block 1 >	size: 24	align: 8	alloc type: 0	alive: true	address: 8	const
Block 2 >	size: 7	align: 8	alloc type: 0	alive: true	address: 152	const
Block 3 >	size: 23	align: 1	alloc type: 0	alive: true	address: 128	const
Block 4 >	size: 1	align: 1	alloc type: 0	alive: true	address: 5
Block 5 >	size: 1	align: 1	alloc type: 0	alive: true	address: 4

LOCAL BLOCKS:
Block 8 >	size: 8	align: 8	alloc type: 1	alive: true	address: 272
Block 9 >	size: 4	align: 4	alloc type: 1	alive: true	address: 256

Target:
ptr %v2.addr = pointer(local, block_id=0, offset=0) / Address=#x170
ptr %v = pointer(local, block_id=1, offset=0) / Address=#x110
ptr %i = pointer(local, block_id=2, offset=0) / Address=#x100
  >> Jump to %for.cond
i32 %#0 = #x00000000 (0)
i1 %cmp = #x1 (1)
  >> Jump to %for.body
i32 %#1 = #x00000000 (0)
i32 %#2 = #x00000000 (0)
i32 %add = #x00000000 (0)
  >> Jump to %for.inc
i32 %#3 = #x00000000 (0)
i32 %inc = #x00000001 (1)
  >> Jump to %for.cond#2
i32 %#0#2 = #x00000001 (1)
i1 %cmp#2 = #x1 (1)
  >> Jump to %for.body#2
i32 %#1#2 = #x00000001 (1)
i32 %#2#2 = #x00000000 (0)
i32 %add#2 = #x00000001 (1)
  >> Jump to %for.inc#2
i32 %#3#2 = #x00000001 (1)
i32 %inc#2 = #x00000002 (2)
  >> Jump to %for.cond#3
i32 %#0#3 = #x00000002 (2)
i1 %cmp#3 = #x1 (1)
  >> Jump to %for.body#3
i32 %#1#3 = #x00000002 (2)
i32 %#2#3 = #x00000001 (1)
i32 %add#3 = #x00000003 (3)
  >> Jump to %for.inc#3
i32 %#3#3 = #x00000002 (2)
i32 %inc#3 = #x00000003 (3)
  >> Jump to %for.cond#4
i32 %#0#4 = #x00000003 (3)
i1 %cmp#4 = #x1 (1)
  >> Jump to %for.body#4
i32 %#1#4 = #x00000003 (3)
i32 %#2#4 = #x00000003 (3)
i32 %add#4 = #x00000006 (6)
  >> Jump to %for.inc#4
i32 %#3#4 = #x00000003 (3)
i32 %inc#4 = #x00000004 (4)
  >> Jump to %for.cond#5
i32 %#0#5 = #x00000004 (4)
i1 %cmp#5 = #x1 (1)
  >> Jump to %for.body#5
i32 %#1#5 = #x00000004 (4)
i32 %#2#5 = #x00000006 (6)
i32 %add#5 = #x0000000a (10)
  >> Jump to %for.inc#5
i32 %#3#5 = #x00000004 (4)
i32 %inc#5 = #x00000005 (5)
  >> Jump to %for.cond#6
i32 %#0#6 = #x00000005 (5)
i1 %cmp#6 = #x1 (1)
  >> Jump to %for.body#6
i32 %#1#6 = #x00000005 (5)
i32 %#2#6 = #x0000000a (10)
i32 %add#6 = #x0000000f (15)
  >> Jump to %for.inc#6
i32 %#3#6 = #x00000005 (5)
i32 %inc#6 = #x00000006 (6)
  >> Jump to %for.cond#7
i32 %#0#7 = #x00000006 (6)
i1 %cmp#7 = #x1 (1)
  >> Jump to %for.body#7
i32 %#1#7 = #x00000006 (6)
i32 %#2#7 = #x0000000f (15)
i32 %add#7 = #x00000015 (21)
  >> Jump to %for.inc#7
i32 %#3#7 = #x00000006 (6)
i32 %inc#7 = #x00000007 (7)
  >> Jump to %for.cond#8
i32 %#0#8 = #x00000007 (7)
i1 %cmp#8 = #x1 (1)
  >> Jump to %for.body#8
i32 %#1#8 = #x00000007 (7)
i32 %#2#8 = #x00000015 (21)
i32 %add#8 = #x0000001c (28)
  >> Jump to %for.inc#8
i32 %#3#8 = #x00000007 (7)
i32 %inc#8 = #x00000008 (8)
  >> Jump to %for.cond#9
i32 %#0#9 = #x00000008 (8)
i1 %cmp#9 = #x1 (1)
  >> Jump to %for.body#9
i32 %#1#9 = #x00000008 (8)
i32 %#2#9 = #x0000001c (28)
i32 %add#9 = #x00000024 (36)
  >> Jump to %for.inc#9
i32 %#3#9 = #x00000008 (8)
i32 %inc#9 = #x00000009 (9)
  >> Jump to %for.cond#10
i32 %#0#10 = #x00000009 (9)
i1 %cmp#10 = #x1 (1)
  >> Jump to %for.body#10
i32 %#1#10 = #x00000009 (9)
i32 %#2#10 = #x00000024 (36)
i32 %add#10 = #x0000002d (45)
  >> Jump to %for.inc#10
i32 %#3#10 = #x00000009 (9)
i32 %inc#10 = #x0000000a (10)
  >> Jump to %for.cond#exit
i32 %#0#exit = #x0000000a (10)
i1 %cmp#exit = #x0 (0)
  >> Jump to %for.end
i32 %#4 = #x0000002d (45)
ptr %#5 = null
void = UB triggered!

TARGET MEMORY STATE
===================
LOCAL BLOCKS:
Block 8 >	size: 8	align: 8	alloc type: 1	alive: true	address: 368
Block 9 >	size: 4	align: 4	alloc type: 1	alive: true	address: 272
Block 10 >	size: 4	align: 4	alloc type: 1	alive: true	address: 256


Summary:
  0 correct transformations
  1 incorrect transformations
  0 failed-to-prove transformations
  0 Alive2 errors
