
----------------------------------------
define void @_Z9reductionPi(ptr noundef %v2) {
entry:
  %v2.addr = alloca i64 8, align 8
  %v = alloca i64 4, align 4
  %i = alloca i64 4, align 4
  store ptr noundef %v2, ptr %v2.addr, align 8
  store i32 0, ptr %v, align 4
  store i32 0, ptr %i, align 4
  br label %for.cond

for.cond:
  %#0 = load i32, ptr %i, align 4
  %cmp = icmp slt i32 %#0, 10
  br i1 %cmp, label %for.body, label %for.end

for.body:
  %#1 = load i32, ptr %i, align 4
  %#2 = load i32, ptr %v, align 4
  %add = add nsw i32 %#2, %#1
  store i32 %add, ptr %v, align 4
  br label %for.inc

for.inc:
  %#3 = load i32, ptr %i, align 4
  %inc = add nsw i32 %#3, 1
  store i32 %inc, ptr %i, align 4
  br label %for.cond#2

for.cond#2:
  %#0#2 = load i32, ptr %i, align 4
  %cmp#2 = icmp slt i32 %#0#2, 10
  br i1 %cmp#2, label %for.body#2, label %for.end

for.body#2:
  %#1#2 = load i32, ptr %i, align 4
  %#2#2 = load i32, ptr %v, align 4
  %add#2 = add nsw i32 %#2#2, %#1#2
  store i32 %add#2, ptr %v, align 4
  br label %for.inc#2

for.inc#2:
  %#3#2 = load i32, ptr %i, align 4
  %inc#2 = add nsw i32 %#3#2, 1
  store i32 %inc#2, ptr %i, align 4
  br label %for.cond#3

for.cond#3:
  %#0#3 = load i32, ptr %i, align 4
  %cmp#3 = icmp slt i32 %#0#3, 10
  br i1 %cmp#3, label %for.body#3, label %for.end

for.body#3:
  %#1#3 = load i32, ptr %i, align 4
  %#2#3 = load i32, ptr %v, align 4
  %add#3 = add nsw i32 %#2#3, %#1#3
  store i32 %add#3, ptr %v, align 4
  br label %for.inc#3

for.inc#3:
  %#3#3 = load i32, ptr %i, align 4
  %inc#3 = add nsw i32 %#3#3, 1
  store i32 %inc#3, ptr %i, align 4
  br label %for.cond#4

for.cond#4:
  %#0#4 = load i32, ptr %i, align 4
  %cmp#4 = icmp slt i32 %#0#4, 10
  br i1 %cmp#4, label %for.body#4, label %for.end

for.body#4:
  %#1#4 = load i32, ptr %i, align 4
  %#2#4 = load i32, ptr %v, align 4
  %add#4 = add nsw i32 %#2#4, %#1#4
  store i32 %add#4, ptr %v, align 4
  br label %for.inc#4

for.inc#4:
  %#3#4 = load i32, ptr %i, align 4
  %inc#4 = add nsw i32 %#3#4, 1
  store i32 %inc#4, ptr %i, align 4
  br label %for.cond#5

for.cond#5:
  %#0#5 = load i32, ptr %i, align 4
  %cmp#5 = icmp slt i32 %#0#5, 10
  br i1 %cmp#5, label %for.body#5, label %for.end

for.body#5:
  %#1#5 = load i32, ptr %i, align 4
  %#2#5 = load i32, ptr %v, align 4
  %add#5 = add nsw i32 %#2#5, %#1#5
  store i32 %add#5, ptr %v, align 4
  br label %for.inc#5

for.inc#5:
  %#3#5 = load i32, ptr %i, align 4
  %inc#5 = add nsw i32 %#3#5, 1
  store i32 %inc#5, ptr %i, align 4
  br label %for.cond#6

for.cond#6:
  %#0#6 = load i32, ptr %i, align 4
  %cmp#6 = icmp slt i32 %#0#6, 10
  br i1 %cmp#6, label %for.body#6, label %for.end

for.body#6:
  %#1#6 = load i32, ptr %i, align 4
  %#2#6 = load i32, ptr %v, align 4
  %add#6 = add nsw i32 %#2#6, %#1#6
  store i32 %add#6, ptr %v, align 4
  br label %for.inc#6

for.inc#6:
  %#3#6 = load i32, ptr %i, align 4
  %inc#6 = add nsw i32 %#3#6, 1
  store i32 %inc#6, ptr %i, align 4
  br label %for.cond#7

for.cond#7:
  %#0#7 = load i32, ptr %i, align 4
  %cmp#7 = icmp slt i32 %#0#7, 10
  br i1 %cmp#7, label %for.body#7, label %for.end

for.body#7:
  %#1#7 = load i32, ptr %i, align 4
  %#2#7 = load i32, ptr %v, align 4
  %add#7 = add nsw i32 %#2#7, %#1#7
  store i32 %add#7, ptr %v, align 4
  br label %for.inc#7

for.inc#7:
  %#3#7 = load i32, ptr %i, align 4
  %inc#7 = add nsw i32 %#3#7, 1
  store i32 %inc#7, ptr %i, align 4
  br label %for.cond#8

for.cond#8:
  %#0#8 = load i32, ptr %i, align 4
  %cmp#8 = icmp slt i32 %#0#8, 10
  br i1 %cmp#8, label %for.body#8, label %for.end

for.body#8:
  %#1#8 = load i32, ptr %i, align 4
  %#2#8 = load i32, ptr %v, align 4
  %add#8 = add nsw i32 %#2#8, %#1#8
  store i32 %add#8, ptr %v, align 4
  br label %for.inc#8

for.inc#8:
  %#3#8 = load i32, ptr %i, align 4
  %inc#8 = add nsw i32 %#3#8, 1
  store i32 %inc#8, ptr %i, align 4
  br label %for.cond#9

for.cond#9:
  %#0#9 = load i32, ptr %i, align 4
  %cmp#9 = icmp slt i32 %#0#9, 10
  br i1 %cmp#9, label %for.body#9, label %for.end

for.body#9:
  %#1#9 = load i32, ptr %i, align 4
  %#2#9 = load i32, ptr %v, align 4
  %add#9 = add nsw i32 %#2#9, %#1#9
  store i32 %add#9, ptr %v, align 4
  br label %for.inc#9

for.inc#9:
  %#3#9 = load i32, ptr %i, align 4
  %inc#9 = add nsw i32 %#3#9, 1
  store i32 %inc#9, ptr %i, align 4
  br label %for.cond#10

for.cond#10:
  %#0#10 = load i32, ptr %i, align 4
  %cmp#10 = icmp slt i32 %#0#10, 10
  br i1 %cmp#10, label %for.body#10, label %for.end

for.body#10:
  %#1#10 = load i32, ptr %i, align 4
  %#2#10 = load i32, ptr %v, align 4
  %add#10 = add nsw i32 %#2#10, %#1#10
  store i32 %add#10, ptr %v, align 4
  br label %for.inc#10

for.inc#10:
  %#3#10 = load i32, ptr %i, align 4
  %inc#10 = add nsw i32 %#3#10, 1
  store i32 %inc#10, ptr %i, align 4
  br label %for.cond#exit

for.cond#exit:
  %#0#exit = load i32, ptr %i, align 4
  %cmp#exit = icmp slt i32 %#0#exit, 10
  br i1 %cmp#exit, label #sink, label %for.end

for.end:
  %#4 = load i32, ptr %v, align 4
  %#5 = load ptr, ptr %v2.addr, align 8
  store i32 %#4, ptr %#5, align 4
  ret void
}
=>
define void @_Z9reductionPi(ptr noundef %v2) {
entry:
  %v2.addr = alloca i64 8, align 8
  %v = alloca i64 4, align 4
  store ptr noundef %v2, ptr %v2.addr, align 8
  store i32 0, ptr %v, align 4
  %v.addr = alloca i64 8, align 8
  %.omp.iv = alloca i64 4, align 4
  %tmp = alloca i64 4, align 4
  %.omp.lb = alloca i64 4, align 4
  %.omp.ub = alloca i64 4, align 4
  %.omp.stride = alloca i64 4, align 4
  %.omp.is_last = alloca i64 4, align 4
  %v1 = alloca i64 4, align 4
  %i = alloca i64 4, align 4
  store ptr %v, ptr %v.addr, align 8
  %#0 = load ptr, ptr %v, align 8
  store i32 0, ptr %.omp.lb, align 4
  store i32 4, ptr %.omp.ub, align 4
  store i32 1, ptr %.omp.stride, align 4
  store i32 0, ptr %.omp.is_last, align 4
  store i32 0, ptr %v1, align 4
  %#1 = load i32, ptr %.omp.ub, align 4
  %cmp = icmp sgt i32 %#1, 9
  br i1 %cmp, label %cond.true.one, label %cond.false.one

cond.false.one:
  %#2 = load i32, ptr %.omp.ub, align 4
  br label %cond.end.one

cond.true.one:
  br label %cond.end.one

cond.end.one:
  %cond = phi i32 [ 9, %cond.true.one ], [ %#2, %cond.false.one ]
  store i32 %cond, ptr %.omp.ub, align 4
  %#3 = load i32, ptr %.omp.lb, align 4
  store i32 %#3, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one

omp.inner.for.cond.one:
  %#4 = load i32, ptr %.omp.iv, align 4
  %#5 = load i32, ptr %.omp.ub, align 4
  %cmp2 = icmp sle i32 %#4, %#5
  br i1 %cmp2, label %omp.inner.for.body.one, label %omp.inner.for.end.one

omp.inner.for.body.one:
  %#6 = load i32, ptr %.omp.iv, align 4
  %mul = mul nsw i32 %#6, 1
  %add = add nsw i32 0, %mul
  store i32 %add, ptr %i, align 4
  %#7 = load i32, ptr %i, align 4
  %#8 = load i32, ptr %v1, align 4
  %add3 = add nsw i32 %#8, %#7
  store i32 %add3, ptr %v1, align 4
  br label %omp.body.continue.one

omp.body.continue.one:
  br label %omp.inner.for.inc.one

omp.inner.for.inc.one:
  %#9 = load i32, ptr %.omp.iv, align 4
  %add4 = add nsw i32 %#9, 1
  store i32 %add4, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#2

omp.inner.for.cond.one#2:
  %#4#2 = load i32, ptr %.omp.iv, align 4
  %#5#2 = load i32, ptr %.omp.ub, align 4
  %cmp2#2 = icmp sle i32 %#4#2, %#5#2
  br i1 %cmp2#2, label %omp.inner.for.body.one#2, label %omp.inner.for.end.one

omp.inner.for.body.one#2:
  %#6#2 = load i32, ptr %.omp.iv, align 4
  %mul#2 = mul nsw i32 %#6#2, 1
  %add#2 = add nsw i32 0, %mul#2
  store i32 %add#2, ptr %i, align 4
  %#7#2 = load i32, ptr %i, align 4
  %#8#2 = load i32, ptr %v1, align 4
  %add3#2 = add nsw i32 %#8#2, %#7#2
  store i32 %add3#2, ptr %v1, align 4
  br label %omp.body.continue.one#2

omp.body.continue.one#2:
  br label %omp.inner.for.inc.one#2

omp.inner.for.inc.one#2:
  %#9#2 = load i32, ptr %.omp.iv, align 4
  %add4#2 = add nsw i32 %#9#2, 1
  store i32 %add4#2, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#3

omp.inner.for.cond.one#3:
  %#4#3 = load i32, ptr %.omp.iv, align 4
  %#5#3 = load i32, ptr %.omp.ub, align 4
  %cmp2#3 = icmp sle i32 %#4#3, %#5#3
  br i1 %cmp2#3, label %omp.inner.for.body.one#3, label %omp.inner.for.end.one

omp.inner.for.body.one#3:
  %#6#3 = load i32, ptr %.omp.iv, align 4
  %mul#3 = mul nsw i32 %#6#3, 1
  %add#3 = add nsw i32 0, %mul#3
  store i32 %add#3, ptr %i, align 4
  %#7#3 = load i32, ptr %i, align 4
  %#8#3 = load i32, ptr %v1, align 4
  %add3#3 = add nsw i32 %#8#3, %#7#3
  store i32 %add3#3, ptr %v1, align 4
  br label %omp.body.continue.one#3

omp.body.continue.one#3:
  br label %omp.inner.for.inc.one#3

omp.inner.for.inc.one#3:
  %#9#3 = load i32, ptr %.omp.iv, align 4
  %add4#3 = add nsw i32 %#9#3, 1
  store i32 %add4#3, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#4

omp.inner.for.cond.one#4:
  %#4#4 = load i32, ptr %.omp.iv, align 4
  %#5#4 = load i32, ptr %.omp.ub, align 4
  %cmp2#4 = icmp sle i32 %#4#4, %#5#4
  br i1 %cmp2#4, label %omp.inner.for.body.one#4, label %omp.inner.for.end.one

omp.inner.for.body.one#4:
  %#6#4 = load i32, ptr %.omp.iv, align 4
  %mul#4 = mul nsw i32 %#6#4, 1
  %add#4 = add nsw i32 0, %mul#4
  store i32 %add#4, ptr %i, align 4
  %#7#4 = load i32, ptr %i, align 4
  %#8#4 = load i32, ptr %v1, align 4
  %add3#4 = add nsw i32 %#8#4, %#7#4
  store i32 %add3#4, ptr %v1, align 4
  br label %omp.body.continue.one#4

omp.body.continue.one#4:
  br label %omp.inner.for.inc.one#4

omp.inner.for.inc.one#4:
  %#9#4 = load i32, ptr %.omp.iv, align 4
  %add4#4 = add nsw i32 %#9#4, 1
  store i32 %add4#4, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#5

omp.inner.for.cond.one#5:
  %#4#5 = load i32, ptr %.omp.iv, align 4
  %#5#5 = load i32, ptr %.omp.ub, align 4
  %cmp2#5 = icmp sle i32 %#4#5, %#5#5
  br i1 %cmp2#5, label %omp.inner.for.body.one#5, label %omp.inner.for.end.one

omp.inner.for.body.one#5:
  %#6#5 = load i32, ptr %.omp.iv, align 4
  %mul#5 = mul nsw i32 %#6#5, 1
  %add#5 = add nsw i32 0, %mul#5
  store i32 %add#5, ptr %i, align 4
  %#7#5 = load i32, ptr %i, align 4
  %#8#5 = load i32, ptr %v1, align 4
  %add3#5 = add nsw i32 %#8#5, %#7#5
  store i32 %add3#5, ptr %v1, align 4
  br label %omp.body.continue.one#5

omp.body.continue.one#5:
  br label %omp.inner.for.inc.one#5

omp.inner.for.inc.one#5:
  %#9#5 = load i32, ptr %.omp.iv, align 4
  %add4#5 = add nsw i32 %#9#5, 1
  store i32 %add4#5, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#6

omp.inner.for.cond.one#6:
  %#4#6 = load i32, ptr %.omp.iv, align 4
  %#5#6 = load i32, ptr %.omp.ub, align 4
  %cmp2#6 = icmp sle i32 %#4#6, %#5#6
  br i1 %cmp2#6, label %omp.inner.for.body.one#6, label %omp.inner.for.end.one

omp.inner.for.body.one#6:
  %#6#6 = load i32, ptr %.omp.iv, align 4
  %mul#6 = mul nsw i32 %#6#6, 1
  %add#6 = add nsw i32 0, %mul#6
  store i32 %add#6, ptr %i, align 4
  %#7#6 = load i32, ptr %i, align 4
  %#8#6 = load i32, ptr %v1, align 4
  %add3#6 = add nsw i32 %#8#6, %#7#6
  store i32 %add3#6, ptr %v1, align 4
  br label %omp.body.continue.one#6

omp.body.continue.one#6:
  br label %omp.inner.for.inc.one#6

omp.inner.for.inc.one#6:
  %#9#6 = load i32, ptr %.omp.iv, align 4
  %add4#6 = add nsw i32 %#9#6, 1
  store i32 %add4#6, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#7

omp.inner.for.cond.one#7:
  %#4#7 = load i32, ptr %.omp.iv, align 4
  %#5#7 = load i32, ptr %.omp.ub, align 4
  %cmp2#7 = icmp sle i32 %#4#7, %#5#7
  br i1 %cmp2#7, label %omp.inner.for.body.one#7, label %omp.inner.for.end.one

omp.inner.for.body.one#7:
  %#6#7 = load i32, ptr %.omp.iv, align 4
  %mul#7 = mul nsw i32 %#6#7, 1
  %add#7 = add nsw i32 0, %mul#7
  store i32 %add#7, ptr %i, align 4
  %#7#7 = load i32, ptr %i, align 4
  %#8#7 = load i32, ptr %v1, align 4
  %add3#7 = add nsw i32 %#8#7, %#7#7
  store i32 %add3#7, ptr %v1, align 4
  br label %omp.body.continue.one#7

omp.body.continue.one#7:
  br label %omp.inner.for.inc.one#7

omp.inner.for.inc.one#7:
  %#9#7 = load i32, ptr %.omp.iv, align 4
  %add4#7 = add nsw i32 %#9#7, 1
  store i32 %add4#7, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#8

omp.inner.for.cond.one#8:
  %#4#8 = load i32, ptr %.omp.iv, align 4
  %#5#8 = load i32, ptr %.omp.ub, align 4
  %cmp2#8 = icmp sle i32 %#4#8, %#5#8
  br i1 %cmp2#8, label %omp.inner.for.body.one#8, label %omp.inner.for.end.one

omp.inner.for.body.one#8:
  %#6#8 = load i32, ptr %.omp.iv, align 4
  %mul#8 = mul nsw i32 %#6#8, 1
  %add#8 = add nsw i32 0, %mul#8
  store i32 %add#8, ptr %i, align 4
  %#7#8 = load i32, ptr %i, align 4
  %#8#8 = load i32, ptr %v1, align 4
  %add3#8 = add nsw i32 %#8#8, %#7#8
  store i32 %add3#8, ptr %v1, align 4
  br label %omp.body.continue.one#8

omp.body.continue.one#8:
  br label %omp.inner.for.inc.one#8

omp.inner.for.inc.one#8:
  %#9#8 = load i32, ptr %.omp.iv, align 4
  %add4#8 = add nsw i32 %#9#8, 1
  store i32 %add4#8, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#9

omp.inner.for.cond.one#9:
  %#4#9 = load i32, ptr %.omp.iv, align 4
  %#5#9 = load i32, ptr %.omp.ub, align 4
  %cmp2#9 = icmp sle i32 %#4#9, %#5#9
  br i1 %cmp2#9, label %omp.inner.for.body.one#9, label %omp.inner.for.end.one

omp.inner.for.body.one#9:
  %#6#9 = load i32, ptr %.omp.iv, align 4
  %mul#9 = mul nsw i32 %#6#9, 1
  %add#9 = add nsw i32 0, %mul#9
  store i32 %add#9, ptr %i, align 4
  %#7#9 = load i32, ptr %i, align 4
  %#8#9 = load i32, ptr %v1, align 4
  %add3#9 = add nsw i32 %#8#9, %#7#9
  store i32 %add3#9, ptr %v1, align 4
  br label %omp.body.continue.one#9

omp.body.continue.one#9:
  br label %omp.inner.for.inc.one#9

omp.inner.for.inc.one#9:
  %#9#9 = load i32, ptr %.omp.iv, align 4
  %add4#9 = add nsw i32 %#9#9, 1
  store i32 %add4#9, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#10

omp.inner.for.cond.one#10:
  %#4#10 = load i32, ptr %.omp.iv, align 4
  %#5#10 = load i32, ptr %.omp.ub, align 4
  %cmp2#10 = icmp sle i32 %#4#10, %#5#10
  br i1 %cmp2#10, label %omp.inner.for.body.one#10, label %omp.inner.for.end.one

omp.inner.for.body.one#10:
  %#6#10 = load i32, ptr %.omp.iv, align 4
  %mul#10 = mul nsw i32 %#6#10, 1
  %add#10 = add nsw i32 0, %mul#10
  store i32 %add#10, ptr %i, align 4
  %#7#10 = load i32, ptr %i, align 4
  %#8#10 = load i32, ptr %v1, align 4
  %add3#10 = add nsw i32 %#8#10, %#7#10
  store i32 %add3#10, ptr %v1, align 4
  br label %omp.body.continue.one#10

omp.body.continue.one#10:
  br label %omp.inner.for.inc.one#10

omp.inner.for.inc.one#10:
  %#9#10 = load i32, ptr %.omp.iv, align 4
  %add4#10 = add nsw i32 %#9#10, 1
  store i32 %add4#10, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond.one#exit

omp.inner.for.cond.one#exit:
  %#4#exit = load i32, ptr %.omp.iv, align 4
  %#5#exit = load i32, ptr %.omp.ub, align 4
  %cmp2#exit = icmp sle i32 %#4#exit, %#5#exit
  br i1 %cmp2#exit, label #sink, label %omp.inner.for.end.one

omp.inner.for.end.one:
  %cmp2#phi#0 = phi i1 [ %cmp2, %omp.inner.for.cond.one ], [ %cmp2#2, %omp.inner.for.cond.one#2 ], [ %cmp2#3, %omp.inner.for.cond.one#3 ], [ %cmp2#4, %omp.inner.for.cond.one#4 ], [ %cmp2#5, %omp.inner.for.cond.one#5 ], [ %cmp2#6, %omp.inner.for.cond.one#6 ], [ %cmp2#7, %omp.inner.for.cond.one#7 ], [ %cmp2#8, %omp.inner.for.cond.one#8 ], [ %cmp2#9, %omp.inner.for.cond.one#9 ], [ %cmp2#10, %omp.inner.for.cond.one#10 ], [ %cmp2#exit, %omp.inner.for.cond.one#exit ]
  br label %omp.loop.exit.one

omp.loop.exit.one:
  %#10 = load i32, ptr %v1, align 4
  %#11 = load i32, ptr %v, align 4
  %t = add nsw i32 %#10, %#11
  %tptr = load ptr, ptr %v, align 8
  store i32 %t, ptr %tptr, align 4
  br label %.omp.reduction.default.one

.omp.reduction.default.one:
  %a = load i32, ptr %v, align 4
  %b = load ptr, ptr %v2.addr, align 8
  store i32 %a, ptr %b, align 4
  br label %partition.two

partition.two:
  %v1_n = alloca i64 4, align 4
  %i_n = alloca i64 4, align 4
  store ptr %v, ptr %v.addr, align 8
  %#12 = load ptr, ptr %v, align 8
  store i32 5, ptr %.omp.lb, align 4
  store i32 9, ptr %.omp.ub, align 4
  store i32 1, ptr %.omp.stride, align 4
  store i32 0, ptr %.omp.is_last, align 4
  store i32 0, ptr %v1_n, align 4
  %#13 = load i32, ptr %.omp.ub, align 4
  %cmp_n = icmp sgt i32 %#13, 9
  br i1 %cmp_n, label %cond.true, label %cond.false

cond.true:
  br label %cond.end

cond.false:
  %#14 = load i32, ptr %.omp.ub, align 4
  br label %cond.end

cond.end:
  %cond_n = phi i32 [ 9, %cond.true ], [ %#14, %cond.false ]
  store i32 %cond_n, ptr %.omp.ub, align 4
  %#15 = load i32, ptr %.omp.lb, align 4
  store i32 %#15, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond

omp.inner.for.cond:
  %#16 = load i32, ptr %.omp.iv, align 4
  %#17 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body, label %omp.inner.for.end

omp.inner.for.body:
  %#18 = load i32, ptr %.omp.iv, align 4
  %mul_n = mul nsw i32 %#18, 1
  %add_n = add nsw i32 0, %mul_n
  store i32 %add_n, ptr %i_n, align 4
  %#19 = load i32, ptr %i_n, align 4
  %#20 = load i32, ptr %v1_n, align 4
  %add3_n = add nsw i32 %#20, %#19
  store i32 %add3_n, ptr %v1_n, align 4
  br label %omp.body.continue

omp.body.continue:
  br label %omp.inner.for.inc

omp.inner.for.inc:
  %#21 = load i32, ptr %.omp.iv, align 4
  %add4_n = add nsw i32 %#21, 1
  store i32 %add4_n, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#2

omp.inner.for.cond#2:
  %#16#2 = load i32, ptr %.omp.iv, align 4
  %#17#2 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#2, label %omp.inner.for.end

omp.inner.for.body#2:
  %#18#2 = load i32, ptr %.omp.iv, align 4
  %mul_n#2 = mul nsw i32 %#18#2, 1
  %add_n#2 = add nsw i32 0, %mul_n#2
  store i32 %add_n#2, ptr %i_n, align 4
  %#19#2 = load i32, ptr %i_n, align 4
  %#20#2 = load i32, ptr %v1_n, align 4
  %add3_n#2 = add nsw i32 %#20#2, %#19#2
  store i32 %add3_n#2, ptr %v1_n, align 4
  br label %omp.body.continue#2

omp.body.continue#2:
  br label %omp.inner.for.inc#2

omp.inner.for.inc#2:
  %#21#2 = load i32, ptr %.omp.iv, align 4
  %add4_n#2 = add nsw i32 %#21#2, 1
  store i32 %add4_n#2, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#3

omp.inner.for.cond#3:
  %#16#3 = load i32, ptr %.omp.iv, align 4
  %#17#3 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#3, label %omp.inner.for.end

omp.inner.for.body#3:
  %#18#3 = load i32, ptr %.omp.iv, align 4
  %mul_n#3 = mul nsw i32 %#18#3, 1
  %add_n#3 = add nsw i32 0, %mul_n#3
  store i32 %add_n#3, ptr %i_n, align 4
  %#19#3 = load i32, ptr %i_n, align 4
  %#20#3 = load i32, ptr %v1_n, align 4
  %add3_n#3 = add nsw i32 %#20#3, %#19#3
  store i32 %add3_n#3, ptr %v1_n, align 4
  br label %omp.body.continue#3

omp.body.continue#3:
  br label %omp.inner.for.inc#3

omp.inner.for.inc#3:
  %#21#3 = load i32, ptr %.omp.iv, align 4
  %add4_n#3 = add nsw i32 %#21#3, 1
  store i32 %add4_n#3, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#4

omp.inner.for.cond#4:
  %#16#4 = load i32, ptr %.omp.iv, align 4
  %#17#4 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#4, label %omp.inner.for.end

omp.inner.for.body#4:
  %#18#4 = load i32, ptr %.omp.iv, align 4
  %mul_n#4 = mul nsw i32 %#18#4, 1
  %add_n#4 = add nsw i32 0, %mul_n#4
  store i32 %add_n#4, ptr %i_n, align 4
  %#19#4 = load i32, ptr %i_n, align 4
  %#20#4 = load i32, ptr %v1_n, align 4
  %add3_n#4 = add nsw i32 %#20#4, %#19#4
  store i32 %add3_n#4, ptr %v1_n, align 4
  br label %omp.body.continue#4

omp.body.continue#4:
  br label %omp.inner.for.inc#4

omp.inner.for.inc#4:
  %#21#4 = load i32, ptr %.omp.iv, align 4
  %add4_n#4 = add nsw i32 %#21#4, 1
  store i32 %add4_n#4, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#5

omp.inner.for.cond#5:
  %#16#5 = load i32, ptr %.omp.iv, align 4
  %#17#5 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#5, label %omp.inner.for.end

omp.inner.for.body#5:
  %#18#5 = load i32, ptr %.omp.iv, align 4
  %mul_n#5 = mul nsw i32 %#18#5, 1
  %add_n#5 = add nsw i32 0, %mul_n#5
  store i32 %add_n#5, ptr %i_n, align 4
  %#19#5 = load i32, ptr %i_n, align 4
  %#20#5 = load i32, ptr %v1_n, align 4
  %add3_n#5 = add nsw i32 %#20#5, %#19#5
  store i32 %add3_n#5, ptr %v1_n, align 4
  br label %omp.body.continue#5

omp.body.continue#5:
  br label %omp.inner.for.inc#5

omp.inner.for.inc#5:
  %#21#5 = load i32, ptr %.omp.iv, align 4
  %add4_n#5 = add nsw i32 %#21#5, 1
  store i32 %add4_n#5, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#6

omp.inner.for.cond#6:
  %#16#6 = load i32, ptr %.omp.iv, align 4
  %#17#6 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#6, label %omp.inner.for.end

omp.inner.for.body#6:
  %#18#6 = load i32, ptr %.omp.iv, align 4
  %mul_n#6 = mul nsw i32 %#18#6, 1
  %add_n#6 = add nsw i32 0, %mul_n#6
  store i32 %add_n#6, ptr %i_n, align 4
  %#19#6 = load i32, ptr %i_n, align 4
  %#20#6 = load i32, ptr %v1_n, align 4
  %add3_n#6 = add nsw i32 %#20#6, %#19#6
  store i32 %add3_n#6, ptr %v1_n, align 4
  br label %omp.body.continue#6

omp.body.continue#6:
  br label %omp.inner.for.inc#6

omp.inner.for.inc#6:
  %#21#6 = load i32, ptr %.omp.iv, align 4
  %add4_n#6 = add nsw i32 %#21#6, 1
  store i32 %add4_n#6, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#7

omp.inner.for.cond#7:
  %#16#7 = load i32, ptr %.omp.iv, align 4
  %#17#7 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#7, label %omp.inner.for.end

omp.inner.for.body#7:
  %#18#7 = load i32, ptr %.omp.iv, align 4
  %mul_n#7 = mul nsw i32 %#18#7, 1
  %add_n#7 = add nsw i32 0, %mul_n#7
  store i32 %add_n#7, ptr %i_n, align 4
  %#19#7 = load i32, ptr %i_n, align 4
  %#20#7 = load i32, ptr %v1_n, align 4
  %add3_n#7 = add nsw i32 %#20#7, %#19#7
  store i32 %add3_n#7, ptr %v1_n, align 4
  br label %omp.body.continue#7

omp.body.continue#7:
  br label %omp.inner.for.inc#7

omp.inner.for.inc#7:
  %#21#7 = load i32, ptr %.omp.iv, align 4
  %add4_n#7 = add nsw i32 %#21#7, 1
  store i32 %add4_n#7, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#8

omp.inner.for.cond#8:
  %#16#8 = load i32, ptr %.omp.iv, align 4
  %#17#8 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#8, label %omp.inner.for.end

omp.inner.for.body#8:
  %#18#8 = load i32, ptr %.omp.iv, align 4
  %mul_n#8 = mul nsw i32 %#18#8, 1
  %add_n#8 = add nsw i32 0, %mul_n#8
  store i32 %add_n#8, ptr %i_n, align 4
  %#19#8 = load i32, ptr %i_n, align 4
  %#20#8 = load i32, ptr %v1_n, align 4
  %add3_n#8 = add nsw i32 %#20#8, %#19#8
  store i32 %add3_n#8, ptr %v1_n, align 4
  br label %omp.body.continue#8

omp.body.continue#8:
  br label %omp.inner.for.inc#8

omp.inner.for.inc#8:
  %#21#8 = load i32, ptr %.omp.iv, align 4
  %add4_n#8 = add nsw i32 %#21#8, 1
  store i32 %add4_n#8, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#9

omp.inner.for.cond#9:
  %#16#9 = load i32, ptr %.omp.iv, align 4
  %#17#9 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#9, label %omp.inner.for.end

omp.inner.for.body#9:
  %#18#9 = load i32, ptr %.omp.iv, align 4
  %mul_n#9 = mul nsw i32 %#18#9, 1
  %add_n#9 = add nsw i32 0, %mul_n#9
  store i32 %add_n#9, ptr %i_n, align 4
  %#19#9 = load i32, ptr %i_n, align 4
  %#20#9 = load i32, ptr %v1_n, align 4
  %add3_n#9 = add nsw i32 %#20#9, %#19#9
  store i32 %add3_n#9, ptr %v1_n, align 4
  br label %omp.body.continue#9

omp.body.continue#9:
  br label %omp.inner.for.inc#9

omp.inner.for.inc#9:
  %#21#9 = load i32, ptr %.omp.iv, align 4
  %add4_n#9 = add nsw i32 %#21#9, 1
  store i32 %add4_n#9, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#10

omp.inner.for.cond#10:
  %#16#10 = load i32, ptr %.omp.iv, align 4
  %#17#10 = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label %omp.inner.for.body#10, label %omp.inner.for.end

omp.inner.for.body#10:
  %#18#10 = load i32, ptr %.omp.iv, align 4
  %mul_n#10 = mul nsw i32 %#18#10, 1
  %add_n#10 = add nsw i32 0, %mul_n#10
  store i32 %add_n#10, ptr %i_n, align 4
  %#19#10 = load i32, ptr %i_n, align 4
  %#20#10 = load i32, ptr %v1_n, align 4
  %add3_n#10 = add nsw i32 %#20#10, %#19#10
  store i32 %add3_n#10, ptr %v1_n, align 4
  br label %omp.body.continue#10

omp.body.continue#10:
  br label %omp.inner.for.inc#10

omp.inner.for.inc#10:
  %#21#10 = load i32, ptr %.omp.iv, align 4
  %add4_n#10 = add nsw i32 %#21#10, 1
  store i32 %add4_n#10, ptr %.omp.iv, align 4
  br label %omp.inner.for.cond#exit

omp.inner.for.cond#exit:
  %#16#exit = load i32, ptr %.omp.iv, align 4
  %#17#exit = load i32, ptr %.omp.ub, align 4
  br i1 %cmp2#phi#0, label #sink, label %omp.inner.for.end

omp.inner.for.end:
  br label %omp.loop.exit

omp.loop.exit:
  %#22 = load i32, ptr %v1_n, align 4
  %#23 = load i32, ptr %v, align 4
  %t2 = add nsw i32 %#22, %#23
  %tptr2 = load ptr, ptr %v, align 8
  store i32 %t2, ptr %tptr2, align 4
  br label %.omp.reduction.default

.omp.reduction.default:
  br label %ret.of.function

ret.of.function:
  %#24 = load i32, ptr %v, align 4
  %#25 = load ptr, ptr %v2.addr, align 8
  store i32 %#24, ptr %#25, align 4
  ret void
}
Transformation doesn't verify!

ERROR: Source is more defined than target

Example:
ptr noundef %v2 = pointer(non-local, block_id=1, offset=0) / Address=#x00c

Source:
ptr %v2.addr = pointer(local, block_id=0, offset=0) / Address=#x410
ptr %v = pointer(local, block_id=1, offset=0) / Address=#x400
ptr %i = pointer(local, block_id=2, offset=0) / Address=#x42c
  >> Jump to %for.cond
i32 %#0 = #x00000000 (0)
i1 %cmp = #x1 (1)
  >> Jump to %for.body
i32 %#1 = #x00000000 (0)
i32 %#2 = #x00000000 (0)
i32 %add = #x00000000 (0)
  >> Jump to %for.inc
i32 %#3 = #x00000000 (0)
i32 %inc = #x00000001 (1)
  >> Jump to %for.cond#2
i32 %#0#2 = #x00000001 (1)
i1 %cmp#2 = #x1 (1)
  >> Jump to %for.body#2
i32 %#1#2 = #x00000001 (1)
i32 %#2#2 = #x00000000 (0)
i32 %add#2 = #x00000001 (1)
  >> Jump to %for.inc#2
i32 %#3#2 = #x00000001 (1)
i32 %inc#2 = #x00000002 (2)
  >> Jump to %for.cond#3
i32 %#0#3 = #x00000002 (2)
i1 %cmp#3 = #x1 (1)
  >> Jump to %for.body#3
i32 %#1#3 = #x00000002 (2)
i32 %#2#3 = #x00000001 (1)
i32 %add#3 = #x00000003 (3)
  >> Jump to %for.inc#3
i32 %#3#3 = #x00000002 (2)
i32 %inc#3 = #x00000003 (3)
  >> Jump to %for.cond#4
i32 %#0#4 = #x00000003 (3)
i1 %cmp#4 = #x1 (1)
  >> Jump to %for.body#4
i32 %#1#4 = #x00000003 (3)
i32 %#2#4 = #x00000003 (3)
i32 %add#4 = #x00000006 (6)
  >> Jump to %for.inc#4
i32 %#3#4 = #x00000003 (3)
i32 %inc#4 = #x00000004 (4)
  >> Jump to %for.cond#5
i32 %#0#5 = #x00000004 (4)
i1 %cmp#5 = #x1 (1)
  >> Jump to %for.body#5
i32 %#1#5 = #x00000004 (4)
i32 %#2#5 = #x00000006 (6)
i32 %add#5 = #x0000000a (10)
  >> Jump to %for.inc#5
i32 %#3#5 = #x00000004 (4)
i32 %inc#5 = #x00000005 (5)
  >> Jump to %for.cond#6
i32 %#0#6 = #x00000005 (5)
i1 %cmp#6 = #x1 (1)
  >> Jump to %for.body#6
i32 %#1#6 = #x00000005 (5)
i32 %#2#6 = #x0000000a (10)
i32 %add#6 = #x0000000f (15)
  >> Jump to %for.inc#6
i32 %#3#6 = #x00000005 (5)
i32 %inc#6 = #x00000006 (6)
  >> Jump to %for.cond#7
i32 %#0#7 = #x00000006 (6)
i1 %cmp#7 = #x1 (1)
  >> Jump to %for.body#7
i32 %#1#7 = #x00000006 (6)
i32 %#2#7 = #x0000000f (15)
i32 %add#7 = #x00000015 (21)
  >> Jump to %for.inc#7
i32 %#3#7 = #x00000006 (6)
i32 %inc#7 = #x00000007 (7)
  >> Jump to %for.cond#8
i32 %#0#8 = #x00000007 (7)
i1 %cmp#8 = #x1 (1)
  >> Jump to %for.body#8
i32 %#1#8 = #x00000007 (7)
i32 %#2#8 = #x00000015 (21)
i32 %add#8 = #x0000001c (28)
  >> Jump to %for.inc#8
i32 %#3#8 = #x00000007 (7)
i32 %inc#8 = #x00000008 (8)
  >> Jump to %for.cond#9
i32 %#0#9 = #x00000008 (8)
i1 %cmp#9 = #x1 (1)
  >> Jump to %for.body#9
i32 %#1#9 = #x00000008 (8)
i32 %#2#9 = #x0000001c (28)
i32 %add#9 = #x00000024 (36)
  >> Jump to %for.inc#9
i32 %#3#9 = #x00000008 (8)
i32 %inc#9 = #x00000009 (9)
  >> Jump to %for.cond#10
i32 %#0#10 = #x00000009 (9)
i1 %cmp#10 = #x1 (1)
  >> Jump to %for.body#10
i32 %#1#10 = #x00000009 (9)
i32 %#2#10 = #x00000024 (36)
i32 %add#10 = #x0000002d (45)
  >> Jump to %for.inc#10
i32 %#3#10 = #x00000009 (9)
i32 %inc#10 = #x0000000a (10)
  >> Jump to %for.cond#exit
i32 %#0#exit = #x0000000a (10)
i1 %cmp#exit = #x0 (0)
  >> Jump to %for.end
i32 %#4 = #x0000002d (45)
ptr %#5 = pointer(non-local, block_id=1, offset=0) / Address=#x00c

SOURCE MEMORY STATE
===================
NON-LOCAL BLOCKS:
Block 0 >	size: 0	align: 4	alloc type: 0	alive: false	address: 0
Block 1 >	size: 4	align: 1	alloc type: 0	alive: true	address: 12

LOCAL BLOCKS:
Block 16 >	size: 8	align: 8	alloc type: 1	alive: true	address: 1040
Block 17 >	size: 4	align: 4	alloc type: 1	alive: true	address: 1024
Block 18 >	size: 4	align: 4	alloc type: 1	alive: true	address: 1068

Target:
ptr %v2.addr = null
ptr %v = pointer(local, block_id=1, offset=0) / Address=#x00c
ptr %v.addr = pointer(local, block_id=2, offset=0)
ptr %.omp.iv = pointer(local, block_id=3, offset=0)
ptr %tmp = pointer(local, block_id=4, offset=0)
ptr %.omp.lb = pointer(local, block_id=5, offset=0)
ptr %.omp.ub = pointer(local, block_id=6, offset=0)
ptr %.omp.stride = pointer(local, block_id=7, offset=0)
ptr %.omp.is_last = pointer(local, block_id=8, offset=0)
ptr %v1 = pointer(local, block_id=9, offset=0)
ptr %i = pointer(local, block_id=10, offset=0)
ptr %#0 = UB triggered!

TARGET MEMORY STATE
===================
LOCAL BLOCKS:
Block 16 >	size: 0	align: 4	alloc type: 0	alive: false	address: 0
Block 17 >	size: 4	align: 1	alloc type: 0	alive: false	address: 12
Block 18 >	align: 4	alloc type: 0	alive: false
Block 19 >	align: 4	alloc type: 0	alive: false
Block 20 >	align: 4	alloc type: 0	alive: false
Block 21 >	align: 4	alloc type: 0	alive: false
Block 22 >	align: 4	alloc type: 0	alive: false
Block 23 >	align: 4	alloc type: 0	alive: false
Block 24 >	align: 4	alloc type: 0	alive: false
Block 25 >	align: 4	alloc type: 0	alive: false
Block 26 >	align: 4	alloc type: 0	alive: false
Block 27 >	align: 4	alloc type: 0	alive: false
Block 28 >	align: 4	alloc type: 0	alive: false


Summary:
  0 correct transformations
  1 incorrect transformations
  0 failed-to-prove transformations
  0 Alive2 errors
